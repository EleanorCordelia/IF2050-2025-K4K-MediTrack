name: CI/CD Pipeline

# Trigger workflow on push to develop or main branches
on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

# Add permissions for test reporting
permissions:
  contents: read
  actions: read
  checks: write

jobs:
  # CI Job - Build and Test
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test

      # Temporarily disable test reporting due to permissions issue
      # - name: Generate test report
      #   uses: dorny/test-reporter@v1
      #   if: always() && hashFiles('**/build/test-results/test/*.xml') != ''
      #   with:
      #     name: JUnit Test Results
      #     path: '**/build/test-results/test/*.xml'
      #     reporter: java-junit
      - name: Build application
        run: ./gradlew build

  # CD Job - Create Distribution
  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Create distribution
        run: ./gradlew distZip

      - name: Get branch name
        id: branch-name
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "branch=develop" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          fi

      - name: Upload distribution artifact
        uses: actions/upload-artifact@v4
        with:
          name: meditrack-${{ steps.branch-name.outputs.env }}-${{ github.sha }}
          path: build/distributions/*.zip
          retention-days: 30

      - name: Upload build reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-reports-${{ steps.branch-name.outputs.branch }}
          path: |
            build/reports/
            build/test-results/
          retention-days: 7

  # Multi-platform builds (optional - for cross-platform distribution)
  multi-platform:
    name: Multi-Platform Build
    runs-on: ${{ matrix.os }}
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable (Unix)
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew

      - name: Create platform distribution
        run: ./gradlew distZip

      - name: Upload platform-specific artifact
        uses: actions/upload-artifact@v4
        with:
          name: meditrack-${{ runner.os }}-${{ github.sha }}
          path: build/distributions/*.zip
          retention-days: 30