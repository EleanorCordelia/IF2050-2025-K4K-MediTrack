name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'  # Adjust based on your project requirements
  GRADLE_VERSION: 'wrapper'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: build/test-results/test/*.xml
          reporter: java-junit

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ github.run_number }}
          path: build/reports/tests/

  build:
    name: Build and Create Distribution
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build project
        run: ./gradlew build -x test

      - name: Create distribution ZIP
        run: ./gradlew distZip

      - name: Get project version
        id: get_version
        run: |
          VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Upload distZip artifact
        uses: actions/upload-artifact@v4
        with:
          name: distribution-${{ github.ref_name }}-${{ steps.get_version.outputs.version }}-${{ github.run_number }}
          path: build/distributions/*.zip
          retention-days: 30

      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-files-${{ github.ref_name }}-${{ github.run_number }}
          path: build/libs/*.jar
          retention-days: 30

  deploy-develop:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: distribution-develop-*
          merge-multiple: true

      - name: Deploy to development environment
        run: |
          echo "Deploying to development environment..."
          # Add your deployment commands here
          # For example:
          # scp *.zip user@dev-server:/path/to/deployment/
          # ssh user@dev-server 'cd /path/to/deployment && unzip -o *.zip'
          ls -la *.zip

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: distribution-main-*
          merge-multiple: true

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here
          # For example:
          # scp *.zip user@prod-server:/path/to/deployment/
          # ssh user@prod-server 'cd /path/to/deployment && unzip -o *.zip'
          ls -la *.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: distribution-main-*
          merge-multiple: true

      - name: Get project version
        id: get_version
        run: |
          chmod +x gradlew
          VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}-${{ github.run_number }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## Changes in this Release
            - Automated release from main branch
            - Build number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.zip
          asset_name: application-${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip